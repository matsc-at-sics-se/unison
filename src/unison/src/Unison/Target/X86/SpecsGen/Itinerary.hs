-- This file has been generated by specsgen. Do not modify by hand!

module Unison.Target.X86.SpecsGen.Itinerary (itinerary) where
import Unison.Target.X86.SpecsGen.X86InstructionDecl
import Unison.Target.X86.SpecsGen.X86ItineraryDecl
itinerary i
  | i `elem` [OR32mrLocked] = IIC_ALU_MEM
  | i `elem` [MOV32r0, MOV32r0_remat] = IIC_ALU_NONMEM
  | i `elem`
      [ADC16mi, ADC16mi8, ADC16mr, ADC16rm, ADC32mi, ADC32mi8, ADC32mr,
       ADC32rm, ADC64mi32, ADC64mi8, ADC64mr, ADC64rm, ADC8mi, ADC8mi8,
       ADC8mr, ADC8rm, ADCX32rm, ADCX64rm, SBB16mi, SBB16mi8, SBB16mr,
       SBB16rm, SBB32mi, SBB32mi8, SBB32mr, SBB32rm, SBB64mi32, SBB64mi8,
       SBB64mr, SBB64rm, SBB8mi, SBB8mi8, SBB8mr, SBB8rm]
    = IIC_BIN_CARRY_MEM
  | i `elem`
      [ADC16i16, ADC16ri, ADC16ri8, ADC16rr, ADC16rr_REV, ADC32i32,
       ADC32ri, ADC32ri8, ADC32rr, ADC32rr_REV, ADC64i32, ADC64ri32,
       ADC64ri8, ADC64rr, ADC64rr_REV, ADC8i8, ADC8ri, ADC8ri8, ADC8rr,
       ADC8rr_REV, ADCX32rr, ADCX64rr, SBB16i16, SBB16ri, SBB16ri8,
       SBB16rr, SBB16rr_REV, SBB32i32, SBB32ri, SBB32ri8, SBB32rr,
       SBB32rr_REV, SBB64i32, SBB64ri32, SBB64ri8, SBB64rr, SBB64rr_REV,
       SBB8i8, SBB8ri, SBB8ri8, SBB8rr, SBB8rr_REV]
    = IIC_BIN_CARRY_NONMEM
  | i `elem`
      [ADD16mi, ADD16mi8, ADD16mr, ADD16rm, ADD32mi, ADD32mi8, ADD32mr,
       ADD32rm, ADD64mi32, ADD64mi8, ADD64mr, ADD64rm, ADD8mi, ADD8mi8,
       ADD8mr, ADD8rm, AND16mi, AND16mi8, AND16mr, AND16rm, AND32mi,
       AND32mi8, AND32mr, AND32rm, AND64mi32, AND64mi8, AND64mr, AND64rm,
       AND8mi, AND8mi8, AND8mr, AND8rm, ANDN32rm, ANDN64rm, CMP16mi,
       CMP16mi8, CMP16mr, CMP16rm, CMP32mi, CMP32mi8, CMP32mr, CMP32rm,
       CMP64mi32, CMP64mi8, CMP64mr, CMP64rm, CMP8mi, CMP8mi8, CMP8mr,
       CMP8rm, OR16mi, OR16mi8, OR16mr, OR16rm, OR32mi, OR32mi8, OR32mr,
       OR32rm, OR64mi32, OR64mi8, OR64mr, OR64rm, OR8mi, OR8mi8, OR8mr,
       OR8rm, SUB16mi, SUB16mi8, SUB16mr, SUB16rm, SUB32mi, SUB32mi8,
       SUB32mr, SUB32rm, SUB64mi32, SUB64mi8, SUB64mr, SUB64rm, SUB8mi,
       SUB8mi8, SUB8mr, SUB8rm, TEST16mi, TEST16rm, TEST32mi, TEST32rm,
       TEST64mi32, TEST64rm, TEST8mi, TEST8rm, XOR16mi, XOR16mi8, XOR16mr,
       XOR16rm, XOR32mi, XOR32mi8, XOR32mr, XOR32rm, XOR64mi32, XOR64mi8,
       XOR64mr, XOR64rm, XOR8mi, XOR8mi8, XOR8mr, XOR8rm]
    = IIC_BIN_MEM
  | i `elem`
      [ADD16i16, ADD16ri, ADD16ri8, ADD16rr, ADD16rr_REV, ADD32i32,
       ADD32ri, ADD32ri8, ADD32rr, ADD32rr_REV, ADD64i32, ADD64ri32,
       ADD64ri8, ADD64rr, ADD64rr_REV, ADD8i8, ADD8ri, ADD8ri8, ADD8rr,
       ADD8rr_REV, AND16i16, AND16ri, AND16ri8, AND16rr, AND16rr_REV,
       AND32i32, AND32ri, AND32ri8, AND32rr, AND32rr_REV, AND64i32,
       AND64ri32, AND64ri8, AND64rr, AND64rr_REV, AND8i8, AND8ri, AND8ri8,
       AND8rr, AND8rr_REV, ANDN32rr, ANDN64rr, CMP16i16, CMP16ri,
       CMP16ri8, CMP16rr, CMP16rr_REV, CMP32i32, CMP32ri, CMP32ri8,
       CMP32rr, CMP32rr_REV, CMP64i32, CMP64ri32, CMP64ri8, CMP64rr,
       CMP64rr_REV, CMP8i8, CMP8ri, CMP8ri8, CMP8rr, CMP8rr_REV, OR16i16,
       OR16ri, OR16ri8, OR16rr, OR16rr_REV, OR32i32, OR32ri, OR32ri8,
       OR32rr, OR32rr_REV, OR64i32, OR64ri32, OR64ri8, OR64rr, OR64rr_REV,
       OR8i8, OR8ri, OR8ri8, OR8rr, OR8rr_REV, SUB16i16, SUB16ri,
       SUB16ri8, SUB16rr, SUB16rr_REV, SUB32i32, SUB32ri, SUB32ri8,
       SUB32rr, SUB32rr_REV, SUB64i32, SUB64ri32, SUB64ri8, SUB64rr,
       SUB64rr_REV, SUB8i8, SUB8ri, SUB8ri8, SUB8rr, SUB8rr_REV,
       TEST16i16, TEST16ri, TEST16rr, TEST32i32, TEST32ri, TEST32rr,
       TEST64i32, TEST64ri32, TEST64rr, TEST8i8, TEST8ri, TEST8ri_NOREX,
       TEST8rr, XOR16i16, XOR16ri, XOR16ri8, XOR16rr, XOR16rr_REV,
       XOR32i32, XOR32ri, XOR32ri8, XOR32rr, XOR32rr_REV, XOR64i32,
       XOR64ri32, XOR64ri8, XOR64rr, XOR64rr_REV, XOR8i8, XOR8ri, XOR8ri8,
       XOR8rr, XOR8rr_REV]
    = IIC_BIN_NONMEM
  | i `elem` [BSF16rm, BSF32rm, BSF64rm, BSR16rm, BSR32rm, BSR64rm] =
    IIC_BIT_SCAN_MEM
  | i `elem` [BSF16rr, BSF32rr, BSF64rr, BSR16rr, BSR32rr, BSR64rr] =
    IIC_BIT_SCAN_REG
  | i `elem` [BSWAP32r, BSWAP64r] = IIC_BSWAP
  | i `elem`
      [BTC16mi8, BTC32mi8, BTC64mi8, BTR16mi8, BTR32mi8, BTR64mi8,
       BTS16mi8, BTS32mi8, BTS64mi8]
    = IIC_BTX_MI
  | i `elem`
      [BTC16mr, BTC32mr, BTC64mr, BTR16mr, BTR32mr, BTR64mr, BTS16mr,
       BTS32mr, BTS64mr]
    = IIC_BTX_MR
  | i `elem`
      [BTC16ri8, BTC32ri8, BTC64ri8, BTR16ri8, BTR32ri8, BTR64ri8,
       BTS16ri8, BTS32ri8, BTS64ri8]
    = IIC_BTX_RI
  | i `elem`
      [BTC16rr, BTC32rr, BTC64rr, BTR16rr, BTR32rr, BTS16rr, BTS32rr,
       BTS64rr]
    = IIC_BTX_RR
  | i `elem` [BT16mi8, BT32mi8, BT64mi8] = IIC_BT_MI
  | i `elem` [BT16mr, BT32mr, BT64mr] = IIC_BT_MR
  | i `elem` [BT16ri8, BT32ri8, BT64ri8] = IIC_BT_RI
  | i `elem` [BT16rr, BT32rr, BT64rr] = IIC_BT_RR
  | i `elem` [CALL16m, CALL32m, CALL64m] = IIC_CALL_MEM
  | i `elem`
      [CALL16r, CALL32r, CALL64pcrel32, CALL64r, CALLpcrel16,
       CALLpcrel32]
    = IIC_CALL_RI
  | i `elem` [CBW, CDQ, CDQE, CQO, CWD, CWDE] = IIC_CBW
  | i `elem` [CLC] = IIC_CLC
  | i `elem` [CLD] = IIC_CLD
  | i `elem` [CMC] = IIC_CMC
  | i `elem`
      [CMOVA16rm, CMOVAE16rm, CMOVB16rm, CMOVBE16rm, CMOVE16rm,
       CMOVG16rm, CMOVGE16rm, CMOVL16rm, CMOVLE16rm, CMOVNE16rm,
       CMOVNO16rm, CMOVNP16rm, CMOVNS16rm, CMOVO16rm, CMOVP16rm,
       CMOVS16rm]
    = IIC_CMOV16_RM
  | i `elem`
      [CMOVA16rr, CMOVAE16rr, CMOVB16rr, CMOVBE16rr, CMOVE16rr,
       CMOVG16rr, CMOVGE16rr, CMOVL16rr, CMOVLE16rr, CMOVNE16rr,
       CMOVNO16rr, CMOVNP16rr, CMOVNS16rr, CMOVO16rr, CMOVP16rr,
       CMOVS16rr]
    = IIC_CMOV16_RR
  | i `elem`
      [CMOVA32rm, CMOVA64rm, CMOVAE32rm, CMOVAE64rm, CMOVB32rm,
       CMOVB64rm, CMOVBE32rm, CMOVBE64rm, CMOVE32rm, CMOVE64rm, CMOVG32rm,
       CMOVG64rm, CMOVGE32rm, CMOVGE64rm, CMOVL32rm, CMOVL64rm,
       CMOVLE32rm, CMOVLE64rm, CMOVNE32rm, CMOVNE64rm, CMOVNO32rm,
       CMOVNO64rm, CMOVNP32rm, CMOVNP64rm, CMOVNS32rm, CMOVNS64rm,
       CMOVO32rm, CMOVO64rm, CMOVP32rm, CMOVP64rm, CMOVS32rm, CMOVS64rm]
    = IIC_CMOV32_RM
  | i `elem`
      [CMOVA32rr, CMOVA64rr, CMOVAE32rr, CMOVAE64rr, CMOVB32rr,
       CMOVB64rr, CMOVBE32rr, CMOVBE64rr, CMOVE32rr, CMOVE64rr, CMOVG32rr,
       CMOVG64rr, CMOVGE32rr, CMOVGE64rr, CMOVL32rr, CMOVL64rr,
       CMOVLE32rr, CMOVLE64rr, CMOVNE32rr, CMOVNE64rr, CMOVNO32rr,
       CMOVNO64rr, CMOVNP32rr, CMOVNP64rr, CMOVNS32rr, CMOVNS64rr,
       CMOVO32rr, CMOVO64rr, CMOVP32rr, CMOVP64rr, CMOVS32rr, CMOVS64rr]
    = IIC_CMOV32_RR
  | i `elem` [CMPXCHG16B] = IIC_CMPXCHG_16B
  | i `elem` [CMPXCHG8B] = IIC_CMPXCHG_8B
  | i `elem` [CMPXCHG16rm, CMPXCHG32rm, CMPXCHG64rm] =
    IIC_CMPXCHG_MEM
  | i `elem` [CMPXCHG8rm] = IIC_CMPXCHG_MEM8
  | i `elem` [CMPXCHG16rr, CMPXCHG32rr, CMPXCHG64rr] =
    IIC_CMPXCHG_REG
  | i `elem` [CMPXCHG8rr] = IIC_CMPXCHG_REG8
  | i `elem` [DIV16m, DIV16r] = IIC_DIV16
  | i `elem` [DIV32m, DIV32r] = IIC_DIV32
  | i `elem` [DIV64m, DIV64r] = IIC_DIV64
  | i `elem` [DIV8m] = IIC_DIV8_MEM
  | i `elem` [DIV8r] = IIC_DIV8_REG
  | i `elem` [ENTER] = IIC_ENTER
  | i `elem` [IDIV16m, IDIV16r] = IIC_IDIV16
  | i `elem` [IDIV32m, IDIV32r] = IIC_IDIV32
  | i `elem` [IDIV64m, IDIV64r] = IIC_IDIV64
  | i `elem` [IDIV8m, IDIV8r] = IIC_IDIV8
  | i `elem` [IMUL16m] = IIC_IMUL16_MEM
  | i `elem` [IMUL16rm] = IIC_IMUL16_RM
  | i `elem` [IMUL16rmi, IMUL16rmi8] = IIC_IMUL16_RMI
  | i `elem` [IMUL16r, IMUL16rr] = IIC_IMUL16_RR
  | i `elem` [IMUL16rri, IMUL16rri8] = IIC_IMUL16_RRI
  | i `elem` [IMUL32m] = IIC_IMUL32_MEM
  | i `elem` [IMUL32rm] = IIC_IMUL32_RM
  | i `elem` [IMUL32rmi, IMUL32rmi8] = IIC_IMUL32_RMI
  | i `elem` [IMUL32r, IMUL32rr] = IIC_IMUL32_RR
  | i `elem` [IMUL32rri, IMUL32rri8] = IIC_IMUL32_RRI
  | i `elem` [IMUL64m] = IIC_IMUL64
  | i `elem` [IMUL64rm] = IIC_IMUL64_RM
  | i `elem` [IMUL64rmi32, IMUL64rmi8] = IIC_IMUL64_RMI
  | i `elem` [IMUL64r, IMUL64rr] = IIC_IMUL64_RR
  | i `elem` [IMUL64rri32, IMUL64rri8] = IIC_IMUL64_RRI
  | i `elem` [IMUL8m, IMUL8r] = IIC_IMUL8
  | i `elem` [JCXZ, JECXZ, JRCXZ] = IIC_JCXZ
  | i `elem`
      [JMP16m, JMP32m, JMP64m, TAILJMPm, TAILJMPm64, TAILJMPm64_REX,
       TAILJMPr64, TAILJMPr64_REX]
    = IIC_JMP_MEM
  | i `elem` [JMP16r, JMP32r, JMP64r, TAILJMPr] = IIC_JMP_REG
  | i `elem`
      [JMP_1, JMP_2, JMP_4, TAILJMPd, TAILJMPd64, TAILJMPd64_REX]
    = IIC_JMP_REL
  | i `elem`
      [JAE_1, JAE_2, JAE_4, JA_1, JA_2, JA_4, JBE_1, JBE_2, JBE_4, JB_1,
       JB_2, JB_4, JE_1, JE_2, JE_4, JGE_1, JGE_2, JGE_4, JG_1, JG_2,
       JG_4, JLE_1, JLE_2, JLE_4, JL_1, JL_2, JL_4, JNE_1, JNE_2, JNE_4,
       JNO_1, JNO_2, JNO_4, JNP_1, JNP_2, JNP_4, JNS_1, JNS_2, JNS_4,
       JO_1, JO_2, JO_4, JP_1, JP_2, JP_4, JS_1, JS_2, JS_4]
    = IIC_Jcc
  | i `elem` [LEA32r, LEA64_32r, LEA64r] = IIC_LEA
  | i `elem` [LEAVE, LEAVE64] = IIC_LEAVE
  | i `elem` [LEA16r] = IIC_LEA_16
  | i `elem` [LODSB, LODSL, LODSQ, LODSW] = IIC_LODS
  | i `elem` [LOOP] = IIC_LOOP
  | i `elem` [LOOPE] = IIC_LOOPE
  | i `elem` [LOOPNE] = IIC_LOOPNE
  | i `elem`
      [MOV16ri, MOV16ri_alt, MOV16ri_alt_remat, MOV16ri_remat, MOV16rr,
       MOV16rr_REV, MOV32ri, MOV32ri_alt, MOV32ri_alt_remat,
       MOV32ri_remat, MOV32rr, MOV32rr_REV, MOV64ri, MOV64ri32,
       MOV64ri32_remat, MOV64ri_remat, MOV64rr, MOV64rr_REV, MOV8ri,
       MOV8ri_alt, MOV8ri_remat, MOV8rr, MOV8rr_NOREX, MOV8rr_REV]
    = IIC_MOV
  | i `elem`
      [MOVBE16mr, MOVBE16rm, MOVBE32mr, MOVBE32rm, MOVBE64mr, MOVBE64rm]
    = IIC_MOVBE
  | i `elem` [MOVSB, MOVSL, MOVSQ, MOVSW] = IIC_MOVS
  | i `elem`
      [MOVSX32_NOREXrm8, MOVSX32_NOREXrr8, MOVSX32rm16, MOVSX32rm8,
       MOVSX32rr16, MOVSX32rr8, MOVSX64rm16, MOVSX64rm32, MOVSX64rm8,
       MOVSX64rr16, MOVSX64rr32, MOVSX64rr8]
    = IIC_MOVSX
  | i `elem` [MOVSX16rm8] = IIC_MOVSX_R16_M8
  | i `elem` [MOVSX16rr8] = IIC_MOVSX_R16_R8
  | i `elem`
      [MOVZX32_NOREXrm8, MOVZX32_NOREXrr8, MOVZX32rm16, MOVZX32rm8,
       MOVZX32rr16, MOVZX32rr8, MOVZX64rm16, MOVZX64rm8, MOVZX64rr16,
       MOVZX64rr8]
    = IIC_MOVZX
  | i `elem` [MOVZX16rm8] = IIC_MOVZX_R16_M8
  | i `elem` [MOVZX16rr8] = IIC_MOVZX_R16_R8
  | i `elem`
      [MOV16ao16, MOV16ao32, MOV16mi, MOV16mr, MOV16o16a, MOV16o32a,
       MOV16rm, MOV32ao16, MOV32ao32, MOV32mi, MOV32mr, MOV32o16a,
       MOV32o32a, MOV32rm, MOV64ao32, MOV64mi32, MOV64mr, MOV64o32a,
       MOV64rm, MOV8ao16, MOV8ao32, MOV8mi, MOV8mr, MOV8mr_NOREX,
       MOV8o16a, MOV8o32a, MOV8rm, MOV8rm_NOREX]
    = IIC_MOV_MEM
  | i `elem` [MUL16m] = IIC_MUL16_MEM
  | i `elem` [MUL16r] = IIC_MUL16_REG
  | i `elem` [MUL32m] = IIC_MUL32_MEM
  | i `elem` [MUL32r] = IIC_MUL32_REG
  | i `elem` [MUL64m, MUL64r] = IIC_MUL64
  | i `elem` [MUL8m, MUL8r] = IIC_MUL8
  | i `elem` [NOOP, NOOPL, NOOPW] = IIC_NOP
  | i `elem` [POP16rmm, POP32rmm, POP64rmm] = IIC_POP_MEM
  | i `elem` [POP16rmr, POP32r, POP32rmr, POP64r, POP64rmr] =
    IIC_POP_REG
  | i `elem` [POP16r] = IIC_POP_REG16
  | i `elem` [PUSHA16, PUSHA32] = IIC_PUSH_A
  | i `elem` [PUSHCS32] = IIC_PUSH_CS
  | i `elem` [PUSHF16, PUSHF32, PUSHF64] = IIC_PUSH_F
  | i `elem`
      [PUSH16i8, PUSH32i8, PUSH64i32, PUSH64i8, PUSHi16, PUSHi32]
    = IIC_PUSH_IMM
  | i `elem` [PUSH16rmm, PUSH32rmm, PUSH64rmm] = IIC_PUSH_MEM
  | i `elem`
      [PUSH16r, PUSH16rmr, PUSH32r, PUSH32rmr, PUSH64r, PUSH64rmr]
    = IIC_PUSH_REG
  | i `elem`
      [PUSHCS16, PUSHDS16, PUSHDS32, PUSHES16, PUSHES32, PUSHFS16,
       PUSHFS32, PUSHFS64, PUSHGS16, PUSHGS32, PUSHGS64, PUSHSS16,
       PUSHSS32]
    = IIC_PUSH_SR
  | i `elem`
      [REP_MOVSB_32, REP_MOVSB_64, REP_MOVSD_32, REP_MOVSD_64,
       REP_MOVSQ_64, REP_MOVSW_32, REP_MOVSW_64]
    = IIC_REP_MOVS
  | i `elem`
      [REP_STOSB_32, REP_STOSB_64, REP_STOSD_32, REP_STOSD_64,
       REP_STOSQ_64, REP_STOSW_32, REP_STOSW_64]
    = IIC_REP_STOS
  | i `elem` [RETL, RETQ, RETW] = IIC_RET
  | i `elem` [RETIL, RETIQ, RETIW] = IIC_RET_IMM
  | i `elem`
      [SETAEm, SETAm, SETBEm, SETBm, SETEm, SETGEm, SETGm, SETLEm, SETLm,
       SETNEm, SETNOm, SETNPm, SETNSm, SETOm, SETPm, SETSm]
    = IIC_SET_M
  | i `elem`
      [SETAEr, SETAr, SETBEr, SETBr, SETEr, SETGEr, SETGr, SETLEr, SETLr,
       SETNEr, SETNOr, SETNPr, SETNSr, SETOr, SETPr, SETSr]
    = IIC_SET_R
  | i `elem` [SHLD16mrCL, SHRD16mrCL] = IIC_SHD16_MEM_CL
  | i `elem` [SHLD16mri8, SHRD16mri8] = IIC_SHD16_MEM_IM
  | i `elem` [SHLD16rrCL, SHRD16rrCL] = IIC_SHD16_REG_CL
  | i `elem` [SHLD16rri8, SHRD16rri8] = IIC_SHD16_REG_IM
  | i `elem` [SHLD32mrCL, SHRD32mrCL] = IIC_SHD32_MEM_CL
  | i `elem` [SHLD32mri8, SHRD32mri8] = IIC_SHD32_MEM_IM
  | i `elem` [SHLD32rrCL, SHRD32rrCL] = IIC_SHD32_REG_CL
  | i `elem` [SHLD32rri8, SHRD32rri8] = IIC_SHD32_REG_IM
  | i `elem` [SHLD64mrCL, SHRD64mrCL] = IIC_SHD64_MEM_CL
  | i `elem` [SHLD64mri8, SHRD64mri8] = IIC_SHD64_MEM_IM
  | i `elem` [SHLD64rrCL, SHRD64rrCL] = IIC_SHD64_REG_CL
  | i `elem` [SHLD64rri8, SHRD64rri8] = IIC_SHD64_REG_IM
  | i `elem`
      [RCL16m1, RCL16mCL, RCL16mi, RCL16r1, RCL16rCL, RCL16ri, RCL32m1,
       RCL32mCL, RCL32mi, RCL32r1, RCL32rCL, RCL32ri, RCL64m1, RCL64mCL,
       RCL64mi, RCL64r1, RCL64rCL, RCL64ri, RCL8m1, RCL8mCL, RCL8mi,
       RCL8r1, RCL8rCL, RCL8ri, RCR16m1, RCR16mCL, RCR16mi, RCR16r1,
       RCR16rCL, RCR16ri, RCR32m1, RCR32mCL, RCR32mi, RCR32r1, RCR32rCL,
       RCR32ri, RCR64m1, RCR64mCL, RCR64mi, RCR64r1, RCR64rCL, RCR64ri,
       RCR8m1, RCR8mCL, RCR8mi, RCR8r1, RCR8rCL, RCR8ri, ROL16m1,
       ROL16mCL, ROL16mi, ROL16r1, ROL16rCL, ROL16ri, ROL32m1, ROL32mCL,
       ROL32mi, ROL32r1, ROL32rCL, ROL32ri, ROL64m1, ROL64mCL, ROL64mi,
       ROL64r1, ROL64rCL, ROL64ri, ROL8m1, ROL8mCL, ROL8mi, ROL8r1,
       ROL8rCL, ROL8ri, ROR16m1, ROR16mCL, ROR16mi, ROR16r1, ROR16rCL,
       ROR16ri, ROR32m1, ROR32mCL, ROR32mi, ROR32r1, ROR32rCL, ROR32ri,
       ROR64m1, ROR64mCL, ROR64mi, ROR64r1, ROR64rCL, ROR64ri, ROR8m1,
       ROR8mCL, ROR8mi, ROR8r1, ROR8rCL, ROR8ri, SAR16m1, SAR16mCL,
       SAR16mi, SAR16r1, SAR16rCL, SAR16ri, SAR32m1, SAR32mCL, SAR32mi,
       SAR32r1, SAR32rCL, SAR32ri, SAR64m1, SAR64mCL, SAR64mi, SAR64r1,
       SAR64rCL, SAR64ri, SAR8m1, SAR8mCL, SAR8mi, SAR8r1, SAR8rCL,
       SAR8ri, SHL16m1, SHL16mCL, SHL16mi, SHL16r1, SHL16rCL, SHL16ri,
       SHL32m1, SHL32mCL, SHL32mi, SHL32r1, SHL32rCL, SHL32ri, SHL64m1,
       SHL64mCL, SHL64mi, SHL64r1, SHL64rCL, SHL64ri, SHL8m1, SHL8mCL,
       SHL8mi, SHL8r1, SHL8rCL, SHL8ri, SHR16m1, SHR16mCL, SHR16mi,
       SHR16r1, SHR16rCL, SHR16ri, SHR32m1, SHR32mCL, SHR32mi, SHR32r1,
       SHR32rCL, SHR32ri, SHR64m1, SHR64mCL, SHR64mi, SHR64r1, SHR64rCL,
       SHR64ri, SHR8m1, SHR8mCL, SHR8mi, SHR8r1, SHR8rCL, SHR8ri]
    = IIC_SR
  | i `elem` [POPCNT16rm, POPCNT32rm, POPCNT64rm] = IIC_SSE_POPCNT_RM
  | i `elem` [POPCNT16rr, POPCNT32rr, POPCNT64rr] = IIC_SSE_POPCNT_RR
  | i `elem` [STC] = IIC_STC
  | i `elem` [STD] = IIC_STD
  | i `elem` [STOSB, STOSL, STOSQ, STOSW] = IIC_STOS
  | i `elem`
      [DEC16m, DEC32m, DEC64m, DEC8m, INC16m, INC32m, INC64m, INC8m,
       NEG16m, NEG32m, NEG64m, NEG8m, NOT16m, NOT32m, NOT64m, NOT8m]
    = IIC_UNARY_MEM
  | i `elem`
      [DEC16r, DEC16r_alt, DEC32r, DEC32r_alt, DEC64r, DEC8r, INC16r,
       INC16r_alt, INC32r, INC32r_alt, INC64r, INC8r, NEG16r, NEG32r,
       NEG64r, NEG8r, NOT16r, NOT32r, NOT64r, NOT8r]
    = IIC_UNARY_REG
  | i `elem` [XCHG16rm, XCHG32rm, XCHG64rm, XCHG8rm] = IIC_XCHG_MEM
  | i `elem`
      [XCHG16ar, XCHG16rr, XCHG32ar, XCHG32ar64, XCHG32rr, XCHG64ar,
       XCHG64rr, XCHG8rr]
    = IIC_XCHG_REG
  | i `elem`
      [ADJCALLSTACKDOWN32, ADJCALLSTACKDOWN64, ADJCALLSTACKUP32,
       ADJCALLSTACKUP64, BTR64rr, MOV16ao64, MOV16o64a, MOV16ri_alt_demat,
       MOV16ri_alt_source, MOV16ri_demat, MOV16ri_source, MOV32ao64,
       MOV32o64a, MOV32r0_demat, MOV32r0_source, MOV32r1, MOV32r1_demat,
       MOV32r1_remat, MOV32r1_source, MOV32r_1, MOV32r_1_demat,
       MOV32r_1_remat, MOV32r_1_source, MOV32ri64, MOV32ri64_demat,
       MOV32ri64_remat, MOV32ri64_source, MOV32ri_alt_demat,
       MOV32ri_alt_source, MOV32ri_demat, MOV32ri_source, MOV64ao64,
       MOV64o64a, MOV64ri32_demat, MOV64ri32_source, MOV64ri_demat,
       MOV64ri_source, MOV8ao64, MOV8o64a, MOV8ri_demat, MOV8ri_source,
       REPNE_PREFIX, REP_PREFIX, REX64_PREFIX, RORX32mi, RORX32ri,
       RORX64mi, RORX64ri, SARX32rm, SARX32rr, SARX64rm, SARX64rr,
       SETB_C16r, SETB_C32r, SETB_C64r, SETB_C8r, SHLX32rm, SHLX32rr,
       SHLX64rm, SHLX64rr, SHRX32rm, SHRX32rr, SHRX64rm, SHRX64rr,
       SUBREG_TO_REG, TCRETURNdi, TCRETURNdi64, TCRETURNmi, TCRETURNmi64,
       TCRETURNri, TCRETURNri64, UD2B]
    = NoItinerary

