-- This file has been generated by specsgen. Do not modify by hand!

module Unison.Target.X86.SpecsGen.ReadWriteInfo (readWriteInfo)
       where
import Unison
import Unison.Target.X86.SpecsGen.X86InstructionDecl
import Unison.Target.X86.X86RegisterDecl
readWriteInfo i
  | i `elem`
      [ADDPDrr, ADDPSrr, ADDSDrm, ADDSDrr, ADDSSrm, ADDSSrr, ADDSUBPDrm,
       ADDSUBPDrr, ADDSUBPSrm, ADDSUBPSrr, ANDNPDrm, ANDNPDrr, ANDNPSrm,
       ANDNPSrr, ANDPDrm, ANDPDrr, ANDPSrm, ANDPSrr, BSWAP32r, BSWAP64r,
       CLC, CLD, CMC, CMPPDrmi, CMPPDrri, CMPPDrri_alt, CMPPSrmi,
       CMPPSrri, CMPPSrri_alt, CMPSDrm, CMPSDrr, CMPSDrr_alt, CMPSSrm,
       CMPSSrr, CMPSSrr_alt, CMPXCHG16rr, CMPXCHG32rr, CMPXCHG64rr,
       CMPXCHG8rr, CVTDQ2PDrr, CVTDQ2PSrr, CVTPD2DQrm, CVTPD2DQrr,
       CVTPD2PSrm, CVTPD2PSrr, CVTPS2DQrm, CVTPS2DQrr, CVTPS2PDrm,
       CVTPS2PDrr, CVTSD2SI64rr, CVTSD2SIrr, CVTSD2SSrm, CVTSD2SSrr,
       CVTSI2SD64rm, CVTSI2SD64rr, CVTSI2SDrm, CVTSI2SDrr, CVTSI2SS64rm,
       CVTSI2SS64rr, CVTSI2SSrm, CVTSI2SSrr, CVTSS2SDrm, CVTSS2SDrr,
       CVTSS2SI64rr, CVTSS2SIrr, CVTTPD2DQrm, CVTTPD2DQrr, CVTTPS2DQrm,
       CVTTPS2DQrr, CVTTSD2SI64rr, CVTTSD2SIrr, CVTTSS2SI64rr,
       CVTTSS2SIrr, DIVPDrr, DIVPSrr, DIVSDrm, DIVSDrr, DIVSSrm, DIVSSrr,
       DPPDrmi, DPPDrri, DPPSrmi, DPPSrri, ENTER, FNSTCW16m, FsANDNPDrr,
       FsANDNPSrr, FsANDPDrr, FsANDPSrr, FsFLD0SD, FsFLD0SS, FsMOVAPDrm,
       FsMOVAPSrm, FsORPDrr, FsORPSrr, FsVMOVAPDrm, FsVMOVAPSrm,
       FsXORPDrr, FsXORPSrr, FvANDNPDrr, FvANDNPSrr, FvANDPDrr, FvANDPSrr,
       FvORPDrr, FvORPSrr, FvXORPDrr, FvXORPSrr, JMP16m, JMP16r, JMP32m,
       JMP32r, JMP64m, JMP64r, JMP_1, JMP_2, JMP_4, LEA16r, LEA16r_demat,
       LEA16r_remat, LEA16r_source, LEA32r, LEA32r_demat, LEA32r_remat,
       LEA32r_source, LEA64_32r, LEA64r, LEA64r_demat, LEA64r_remat,
       LEA64r_source, LOOP, LOOPE, LOOPNE, MAXCPDrr, MAXCPSrr, MAXCSDrm,
       MAXCSDrr, MAXCSSrm, MAXCSSrr, MAXPDrr, MAXPSrr, MAXSDrm, MAXSDrr,
       MAXSSrm, MAXSSrr, MINCPDrr, MINCPSrr, MINCSDrm, MINCSDrr, MINCSSrm,
       MINCSSrr, MINPDrr, MINPSrr, MINSDrm, MINSDrr, MINSSrm, MINSSrr,
       MOV16mi, MOV16mr, MOV16ri, MOV16ri_alt, MOV16ri_alt_demat,
       MOV16ri_alt_remat, MOV16ri_alt_source, MOV16ri_demat,
       MOV16ri_remat, MOV16ri_source, MOV16rm, MOV16rr, MOV16rr_REV,
       MOV32mi, MOV32mr, MOV32r0_demat, MOV32r0_source, MOV32r1_demat,
       MOV32r1_source, MOV32r_1_demat, MOV32r_1_source, MOV32ri,
       MOV32ri64, MOV32ri64_demat, MOV32ri64_remat, MOV32ri64_source,
       MOV32ri_alt, MOV32ri_alt_demat, MOV32ri_alt_remat,
       MOV32ri_alt_source, MOV32ri_demat, MOV32ri_remat, MOV32ri_source,
       MOV32rm, MOV32rr, MOV32rr_REV, MOV64mi32, MOV64mr, MOV64ri,
       MOV64ri32, MOV64ri32_demat, MOV64ri32_remat, MOV64ri32_source,
       MOV64ri_demat, MOV64ri_remat, MOV64ri_source, MOV64rm, MOV64rr,
       MOV64rr_REV, MOV64toPQIrr, MOV64toSDrm, MOV64toSDrr, MOV8mi,
       MOV8mr, MOV8ri, MOV8ri_alt, MOV8ri_demat, MOV8ri_remat,
       MOV8ri_source, MOV8rm, MOV8rr, MOV8rr_NOREX, MOV8rr_REV, MOVAPDmr,
       MOVAPDrm, MOVAPDrr, MOVAPDrr_REV, MOVAPSmr, MOVAPSrm, MOVAPSrr,
       MOVAPSrr_REV, MOVBE16mr, MOVBE16rm, MOVBE32mr, MOVBE32rm,
       MOVBE64mr, MOVBE64rm, MOVDDUPrm, MOVDDUPrr, MOVDI2PDIrm,
       MOVDI2PDIrr, MOVDI2SSrm, MOVDI2SSrr, MOVDQArr, MOVDQArr_REV,
       MOVDQUrr, MOVDQUrr_REV, MOVE16, MOVE32, MOVE64, MOVE8, MOVHLPSrr,
       MOVHPDmr, MOVHPDrm, MOVHPSmr, MOVHPSrm, MOVLHPSrr, MOVLPDmr,
       MOVLPDrm, MOVLPSmr, MOVLPSrm, MOVNTDQArm, MOVNTDQmr, MOVNTPDmr,
       MOVNTPSmr, MOVNTSD, MOVNTSS, MOVPDI2DImr, MOVPDI2DIrr, MOVPQI2QImr,
       MOVPQI2QIrr, MOVPQIto64rr, MOVQI2PQIrm, MOVSDmr, MOVSDrm, MOVSDrr,
       MOVSDrr_REV, MOVSDto64mr, MOVSDto64rr, MOVSHDUPrm, MOVSHDUPrr,
       MOVSLDUPrm, MOVSLDUPrr, MOVSS2DImr, MOVSS2DIrr, MOVSSmr, MOVSSrm,
       MOVSSrr, MOVSSrr_REV, MOVSX16rr8, MOVSX32_NOREXrr8, MOVSX32rm16,
       MOVSX32rm8, MOVSX32rr16, MOVSX32rr8, MOVSX64rm16, MOVSX64rm32,
       MOVSX64rm8, MOVSX64rr16, MOVSX64rr32, MOVSX64rr8, MOVUPDmr,
       MOVUPDrm, MOVUPDrr, MOVUPDrr_REV, MOVUPSmr, MOVUPSrm, MOVUPSrr,
       MOVUPSrr_REV, MOVZPQILo2PQIrm, MOVZPQILo2PQIrr, MOVZQI2PQIrm,
       MOVZX16rr8, MOVZX32_NOREXrr8, MOVZX32rm16, MOVZX32rm8, MOVZX32rr16,
       MOVZX32rr8, MOVZX64rr16, MOVZX64rr8, MPSADBWrmi, MPSADBWrri,
       MULPDrr, MULPSrr, MULSDrm, MULSDrr, MULSSrm, MULSSrr, NOOP, NOOPL,
       NOOPW, NOT16m, NOT16r, NOT32m, NOT32r, NOT64m, NOT64r, NOT8m,
       NOT8r, ORPDrm, ORPDrr, ORPSrm, ORPSrr, PACKSSDWrm, PACKSSDWrr,
       PACKSSWBrm, PACKSSWBrr, PACKUSDWrm, PACKUSDWrr, PACKUSWBrm,
       PACKUSWBrr, PADDBrm, PADDBrr, PADDDrm, PADDDrr, PADDQrm, PADDQrr,
       PADDWrm, PADDWrr, PANDNrm, PANDNrr, PANDrm, PANDrr, PCMPEQBrm,
       PCMPEQBrr, PCMPEQDrm, PCMPEQDrr, PCMPEQQrm, PCMPEQQrr, PCMPEQWrm,
       PCMPEQWrr, PCMPGTBrm, PCMPGTBrr, PCMPGTDrm, PCMPGTDrr, PCMPGTQrm,
       PCMPGTQrr, PCMPGTWrm, PCMPGTWrr, PMULDQrm, PMULDQrr, PMULUDQrm,
       PMULUDQrr, PORrm, PORrr, PSHUFBrm, PSHUFBrr, PSHUFDmi, PSHUFDri,
       PSHUFHWmi, PSHUFHWri, PSHUFLWmi, PSHUFLWri, PSLLDQri, PSLLDri,
       PSLLDrm, PSLLDrr, PSLLQri, PSLLQrm, PSLLQrr, PSLLWri, PSLLWrm,
       PSLLWrr, PSRADri, PSRADrm, PSRADrr, PSRAWri, PSRAWrm, PSRAWrr,
       PSRLDQri, PSRLDri, PSRLDrm, PSRLDrr, PSRLQri, PSRLQrm, PSRLQrr,
       PSRLWri, PSRLWrm, PSRLWrr, PSUBBrm, PSUBBrr, PSUBDrm, PSUBDrr,
       PSUBQrm, PSUBQrr, PSUBWrm, PSUBWrr, PUNPCKHBWrm, PUNPCKHBWrr,
       PUNPCKHDQrm, PUNPCKHDQrr, PUNPCKHQDQrm, PUNPCKHQDQrr, PUNPCKHWDrm,
       PUNPCKHWDrr, PUNPCKLBWrm, PUNPCKLBWrr, PUNPCKLDQrm, PUNPCKLDQrr,
       PUNPCKLQDQrm, PUNPCKLQDQrr, PUNPCKLWDrm, PUNPCKLWDrr, PUSHCS16,
       PUSHCS32, PUSHDS16, PUSHDS32, PUSHES16, PUSHES32, PUSHFS16,
       PUSHFS32, PUSHFS64, PUSHGS16, PUSHGS32, PUSHGS64, PUSHSS16,
       PUSHSS32, PXORrm, PXORrr, RETIL, RETIQ, RETIW, RETL, RETQ, RETW,
       REX64_PREFIX, RORX32ri, RORX64ri, ROUNDPDm, ROUNDPDr, ROUNDPSm,
       ROUNDPSr, ROUNDSDm, ROUNDSDr, ROUNDSSm, ROUNDSSr, SARX32rr,
       SARX64rr, SHLX32rr, SHLX64rr, SHRX32rr, SHRX64rr, SQRTSDr, SQRTSSr,
       STC, STD, SUBPDrr, SUBPSrr, SUBSDrm, SUBSDrr, SUBSSrm, SUBSSrr,
       UD2B, V_SET0, V_SETALLONES, XCHG16rm, XCHG16rr, XCHG32rm, XCHG32rr,
       XCHG64rm, XCHG64rr, XCHG8rm, XCHG8rr, XORPDrm, XORPDrr, XORPSrm,
       XORPSrr]
    = ([], [])
  | i `elem` [MOV8mr_NOREX, MOVDQAmr, MOVDQUmr, MOVPQIto64rm] =
    ([], [Memory "mem"])
  | i `elem`
      [ADD16mi, ADD16mi8, ADD16mr, ADD16ri, ADD16ri8, ADD16ri8_DB,
       ADD16ri_DB, ADD16rm, ADD16rr, ADD16rr_DB, ADD16rr_REV, ADD32mi,
       ADD32mi8, ADD32mr, ADD32ri, ADD32ri8, ADD32ri8_DB, ADD32ri_DB,
       ADD32rm, ADD32rr, ADD32rr_DB, ADD32rr_REV, ADD64mi32, ADD64mi8,
       ADD64mr, ADD64ri32, ADD64ri32_DB, ADD64ri8, ADD64ri8_DB, ADD64rm,
       ADD64rr, ADD64rr_DB, ADD64rr_REV, ADD8mi, ADD8mr, ADD8ri, ADD8ri8,
       ADD8rm, ADD8rr, ADD8rr_REV, ADDRSP_pseudo, AND16mi, AND16mi8,
       AND16mr, AND16ri, AND16ri8, AND16rm, AND16rr, AND16rr_REV, AND32mi,
       AND32mi8, AND32mr, AND32ri, AND32ri8, AND32rm, AND32rr,
       AND32rr_REV, AND64mi32, AND64mi8, AND64mr, AND64ri32, AND64ri8,
       AND64rm, AND64rr, AND64rr_REV, AND8mi, AND8mr, AND8ri, AND8ri8,
       AND8rm, AND8rr, AND8rr_REV, ANDN32rm, ANDN32rr, ANDN64rm, ANDN64rr,
       BSF16rm, BSF16rr, BSF32rm, BSF32rr, BSF64rm, BSF64rr, BSR16rm,
       BSR16rr, BSR32rm, BSR32rr, BSR64rm, BSR64rr, BT16mi8, BT16ri8,
       BT16rr, BT32mi8, BT32ri8, BT32rr, BT64mi8, BT64ri8, BT64rr,
       BTC16ri8, BTC16rr, BTC32ri8, BTC32rr, BTC64ri8, BTC64rr, BTR16ri8,
       BTR16rr, BTR32ri8, BTR32rr, BTR64ri8, BTR64rr, BTS16ri8, BTS16rr,
       BTS32ri8, BTS32rr, BTS64ri8, BTS64rr, CMP16mi, CMP16mi8, CMP16mr,
       CMP16ri, CMP16ri8, CMP16rm, CMP16rr, CMP16rr_REV, CMP32mi,
       CMP32mi8, CMP32mr, CMP32ri, CMP32ri8, CMP32rm, CMP32rr,
       CMP32rr_REV, CMP64mi32, CMP64mi8, CMP64mr, CMP64ri32, CMP64ri8,
       CMP64rm, CMP64rr, CMP64rr_REV, CMP8mi, CMP8mr, CMP8ri, CMP8ri8,
       CMP8rm, CMP8rr, CMP8rr_REV, COMISDrm, COMISDrr, COMISSrm, COMISSrr,
       DEC16m, DEC16r, DEC16r_alt, DEC32m, DEC32r, DEC32r_alt, DEC64m,
       DEC64r, DEC8m, DEC8r, IMUL16rm, IMUL16rmi, IMUL16rmi8, IMUL16rr,
       IMUL16rri, IMUL16rri8, IMUL32rm, IMUL32rmi, IMUL32rmi8, IMUL32rr,
       IMUL32rri, IMUL32rri8, IMUL64rm, IMUL64rmi32, IMUL64rmi8, IMUL64rr,
       IMUL64rri32, IMUL64rri8, INC16m, INC16r, INC16r_alt, INC32m,
       INC32r, INC32r_alt, INC64m, INC64r, INC8m, INC8r, MOV32r0,
       MOV32r0_remat, MOV32r1, MOV32r1_remat, MOV32r_1, MOV32r_1_remat,
       NEG16m, NEG16r, NEG32m, NEG32r, NEG64m, NEG64r, NEG8m, NEG8r,
       OR16mi, OR16mi8, OR16mr, OR16ri, OR16ri8, OR16rm, OR16rr,
       OR16rr_REV, OR32mi, OR32mi8, OR32mr, OR32mrLocked, OR32ri, OR32ri8,
       OR32rm, OR32rr, OR32rr_REV, OR64mi32, OR64mi8, OR64mr, OR64ri32,
       OR64ri8, OR64rm, OR64rr, OR64rr_REV, OR8mi, OR8mr, OR8ri, OR8ri8,
       OR8rm, OR8rr, OR8rr_REV, POPCNT16rm, POPCNT16rr, POPCNT32rm,
       POPCNT32rr, POPCNT64rm, POPCNT64rr, RCL16m1, RCL16mi, RCL16r1,
       RCL16ri, RCL32m1, RCL32mi, RCL32r1, RCL32ri, RCL64m1, RCL64mi,
       RCL64r1, RCL64ri, RCL8m1, RCL8mi, RCL8r1, RCL8ri, RCR16m1, RCR16mi,
       RCR16r1, RCR16ri, RCR32m1, RCR32mi, RCR32r1, RCR32ri, RCR64m1,
       RCR64mi, RCR64r1, RCR64ri, RCR8m1, RCR8mi, RCR8r1, RCR8ri, ROL16m1,
       ROL16mi, ROL16r1, ROL16ri, ROL32m1, ROL32mi, ROL32r1, ROL32ri,
       ROL64m1, ROL64mi, ROL64r1, ROL64ri, ROL8m1, ROL8mi, ROL8r1, ROL8ri,
       ROR16m1, ROR16mi, ROR16r1, ROR16ri, ROR32m1, ROR32mi, ROR32r1,
       ROR32ri, ROR64m1, ROR64mi, ROR64r1, ROR64ri, ROR8m1, ROR8mi,
       ROR8r1, ROR8ri, SAR16m1, SAR16mi, SAR16r1, SAR16ri, SAR32m1,
       SAR32mi, SAR32r1, SAR32ri, SAR64m1, SAR64mi, SAR64r1, SAR64ri,
       SAR8m1, SAR8mi, SAR8r1, SAR8ri, SHL16m1, SHL16mi, SHL16r1, SHL16ri,
       SHL32m1, SHL32mi, SHL32r1, SHL32ri, SHL64m1, SHL64mi, SHL64r1,
       SHL64ri, SHL8m1, SHL8mi, SHL8r1, SHL8ri, SHLD16mri8, SHLD16rri8,
       SHLD32mri8, SHLD32rri8, SHLD64mri8, SHLD64rri8, SHR16m1, SHR16mi,
       SHR16r1, SHR16ri, SHR32m1, SHR32mi, SHR32r1, SHR32ri, SHR64m1,
       SHR64mi, SHR64r1, SHR64ri, SHR8m1, SHR8mi, SHR8r1, SHR8ri,
       SHRD16mri8, SHRD16rri8, SHRD32mri8, SHRD32rri8, SHRD64mri8,
       SHRD64rri8, SUB16mi, SUB16mi8, SUB16mr, SUB16ri, SUB16ri8, SUB16rm,
       SUB16rr, SUB16rr_REV, SUB32mi, SUB32mi8, SUB32mr, SUB32ri,
       SUB32ri8, SUB32rm, SUB32rr, SUB32rr_REV, SUB64mi32, SUB64mi8,
       SUB64mr, SUB64ri32, SUB64ri8, SUB64rm, SUB64rr, SUB64rr_REV,
       SUB8mi, SUB8mr, SUB8ri, SUB8ri8, SUB8rm, SUB8rr, SUB8rr_REV,
       SUBRSP_pseudo, TEST16mi, TEST16ri, TEST16rm, TEST16rr, TEST32mi,
       TEST32ri, TEST32rm, TEST32rr, TEST64mi32, TEST64ri32, TEST64rm,
       TEST64rr, TEST8mi, TEST8ri, TEST8ri_NOREX, TEST8rm, TEST8rr,
       UCOMISDrm, UCOMISDrr, UCOMISSrm, UCOMISSrr, XOR16mi, XOR16mi8,
       XOR16mr, XOR16ri, XOR16ri8, XOR16rm, XOR16rr, XOR16rr_REV, XOR32mi,
       XOR32mi8, XOR32mr, XOR32ri, XOR32ri8, XOR32rm, XOR32rr,
       XOR32rr_REV, XOR64mi32, XOR64mi8, XOR64mr, XOR64ri32, XOR64ri8,
       XOR64rm, XOR64rr, XOR64rr_REV, XOR8mi, XOR8mr, XOR8ri, XOR8ri8,
       XOR8rm, XOR8rr, XOR8rr_REV]
    = ([], [OtherSideEffect EFLAGS])
  | i `elem`
      [ADDPDrm, ADDPSrm, CMPPDrmi_alt, CMPPSrmi_alt, CMPSDrm_alt,
       CMPSSrm_alt, CVTDQ2PDrm, CVTDQ2PSrm, DIVPDrm, DIVPSrm, FsANDNPDrm,
       FsANDNPSrm, FsANDPDrm, FsANDPSrm, FsORPDrm, FsORPSrm, FsXORPDrm,
       FsXORPSrm, FvANDNPDrm, FvANDNPSrm, FvANDPDrm, FvANDPSrm, FvORPDrm,
       FvORPSrm, FvXORPDrm, FvXORPSrm, MAXCPDrm, MAXCPSrm, MAXPDrm,
       MAXPSrm, MINCPDrm, MINCPSrm, MINPDrm, MINPSrm, MOV64toPQIrm,
       MOV8rm_NOREX, MOVDQArm, MOVDQUrm, MOVSX16rm8, MOVSX32_NOREXrm8,
       MOVZX16rm8, MOVZX32_NOREXrm8, MOVZX64rm16, MOVZX64rm8, MULPDrm,
       MULPSrm, RORX32mi, RORX64mi, SARX32rm, SARX64rm, SHLX32rm,
       SHLX64rm, SHRX32rm, SHRX64rm, SQRTSDm, SQRTSSm, SUBPDrm, SUBPSrm]
    = ([Memory "mem"], [])
  | i `elem` [CMPXCHG16rm, CMPXCHG32rm, CMPXCHG64rm, CMPXCHG8rm] =
    ([Memory "mem"], [Memory "mem"])
  | i `elem`
      [ADD8mi8, AND8mi8, BTC16mi8, BTC16mr, BTC32mi8, BTC32mr, BTC64mi8,
       BTC64mr, BTR16mi8, BTR16mr, BTR32mi8, BTR32mr, BTR64mi8, BTR64mr,
       BTS16mi8, BTS16mr, BTS32mi8, BTS32mr, BTS64mi8, BTS64mr, OR8mi8,
       SUB8mi8, XOR8mi8]
    = ([Memory "mem"], [Memory "mem", OtherSideEffect EFLAGS])
  | i `elem` [MOV8ao16, MOV8ao32, MOV8ao64] =
    ([Memory "mem"], [OtherSideEffect AL])
  | i `elem` [MOV16ao16, MOV16ao32, MOV16ao64] =
    ([Memory "mem"], [OtherSideEffect AX])
  | i `elem` [MOV32ao16, MOV32ao32, MOV32ao64] =
    ([Memory "mem"], [OtherSideEffect EAX])
  | i `elem` [BT16mr, BT32mr, BT64mr, CMP8mi8] =
    ([Memory "mem"], [OtherSideEffect EFLAGS])
  | i `elem` [MOV64ao32, MOV64ao64] =
    ([Memory "mem"], [OtherSideEffect RAX])
  | i `elem` [IMUL8m] =
    ([Memory "mem", OtherSideEffect AL],
     [OtherSideEffect AL, OtherSideEffect EFLAGS, OtherSideEffect AX])
  | i `elem` [DIV8m, IDIV8m] =
    ([Memory "mem", OtherSideEffect AX],
     [OtherSideEffect AL, OtherSideEffect AH, OtherSideEffect EFLAGS])
  | i `elem` [IMUL16m, MUL16m] =
    ([Memory "mem", OtherSideEffect AX],
     [OtherSideEffect AX, OtherSideEffect DX, OtherSideEffect EFLAGS])
  | i `elem` [DIV16m, IDIV16m] =
    ([Memory "mem", OtherSideEffect AX, OtherSideEffect DX],
     [OtherSideEffect AX, OtherSideEffect DX, OtherSideEffect EFLAGS])
  | i `elem` [IMUL32m, MUL32m] =
    ([Memory "mem", OtherSideEffect EAX],
     [OtherSideEffect EAX, OtherSideEffect EDX, OtherSideEffect EFLAGS])
  | i `elem` [DIV32m, IDIV32m] =
    ([Memory "mem", OtherSideEffect EAX, OtherSideEffect EDX],
     [OtherSideEffect EAX, OtherSideEffect EDX, OtherSideEffect EFLAGS])
  | i `elem` [LEAVE] =
    ([Memory "mem", OtherSideEffect EBP, OtherSideEffect ESP],
     [OtherSideEffect EBP, OtherSideEffect ESP])
  | i `elem` [ADC8mi8, SBB8mi8] =
    ([Memory "mem", OtherSideEffect EFLAGS],
     [Memory "mem", OtherSideEffect EFLAGS])
  | i `elem` [ADCX32rm, ADCX64rm] =
    ([Memory "mem", OtherSideEffect EFLAGS], [OtherSideEffect EFLAGS])
  | i `elem` [TAILJMPm, TCRETURNmi] =
    ([Memory "mem", OtherSideEffect ESP], [])
  | i `elem` [PUSH16rmm, PUSH32rmm] =
    ([Memory "mem", OtherSideEffect ESP],
     [Memory "mem", OtherSideEffect ESP])
  | i `elem` [POP16r, POP16rmm, POP16rmr, POP32r, POP32rmm, POP32rmr]
    = ([Memory "mem", OtherSideEffect ESP], [OtherSideEffect ESP])
  | i `elem` [IMUL64m, MUL64m] =
    ([Memory "mem", OtherSideEffect RAX],
     [OtherSideEffect RAX, OtherSideEffect RDX, OtherSideEffect EFLAGS])
  | i `elem` [DIV64m, IDIV64m] =
    ([Memory "mem", OtherSideEffect RAX, OtherSideEffect RDX],
     [OtherSideEffect RAX, OtherSideEffect RDX, OtherSideEffect EFLAGS])
  | i `elem` [LEAVE64] =
    ([Memory "mem", OtherSideEffect RBP, OtherSideEffect RSP],
     [OtherSideEffect RBP, OtherSideEffect RSP])
  | i `elem` [TAILJMPm64, TAILJMPm64_REX, TCRETURNmi64] =
    ([Memory "mem", OtherSideEffect RSP], [])
  | i `elem` [PUSH64rmm] =
    ([Memory "mem", OtherSideEffect RSP],
     [Memory "mem", OtherSideEffect RSP])
  | i `elem` [POP64r, POP64rmm, POP64rmr] =
    ([Memory "mem", OtherSideEffect RSP], [OtherSideEffect RSP])
  | i `elem` [MOV8o16a, MOV8o32a, MOV8o64a] =
    ([OtherSideEffect AL], [Memory "mem"])
  | i `elem` [ADD8i8, AND8i8, OR8i8, SUB8i8, XOR8i8] =
    ([OtherSideEffect AL],
     [OtherSideEffect AL, OtherSideEffect EFLAGS])
  | i `elem` [IMUL8r, MUL8m, MUL8r] =
    ([OtherSideEffect AL],
     [OtherSideEffect AL, OtherSideEffect EFLAGS, OtherSideEffect AX])
  | i `elem` [CBW] = ([OtherSideEffect AL], [OtherSideEffect AX])
  | i `elem` [CMP8i8, TEST8i8] =
    ([OtherSideEffect AL], [OtherSideEffect EFLAGS])
  | i `elem` [REP_STOSB_32] =
    ([OtherSideEffect AL, OtherSideEffect ECX, OtherSideEffect EDI],
     [OtherSideEffect ECX, OtherSideEffect EDI])
  | i `elem` [STOSB] =
    ([OtherSideEffect AL, OtherSideEffect EDI, OtherSideEffect EFLAGS],
     [OtherSideEffect EDI])
  | i `elem` [ADC8i8, SBB8i8] =
    ([OtherSideEffect AL, OtherSideEffect EFLAGS],
     [OtherSideEffect AL, OtherSideEffect EFLAGS])
  | i `elem` [REP_STOSB_64] =
    ([OtherSideEffect AL, OtherSideEffect RCX, OtherSideEffect RDI],
     [OtherSideEffect RCX, OtherSideEffect RDI])
  | i `elem` [MOV16o16a, MOV16o32a, MOV16o64a] =
    ([OtherSideEffect AX], [Memory "mem"])
  | i `elem` [DIV8r, IDIV8r] =
    ([OtherSideEffect AX],
     [OtherSideEffect AL, OtherSideEffect AH, OtherSideEffect EFLAGS])
  | i `elem` [XCHG16ar] =
    ([OtherSideEffect AX], [OtherSideEffect AX])
  | i `elem` [CWD] =
    ([OtherSideEffect AX], [OtherSideEffect AX, OtherSideEffect DX])
  | i `elem` [IMUL16r, MUL16r] =
    ([OtherSideEffect AX],
     [OtherSideEffect AX, OtherSideEffect DX, OtherSideEffect EFLAGS])
  | i `elem` [ADD16i16, AND16i16, OR16i16, SUB16i16, XOR16i16] =
    ([OtherSideEffect AX],
     [OtherSideEffect AX, OtherSideEffect EFLAGS])
  | i `elem` [CWDE] = ([OtherSideEffect AX], [OtherSideEffect EAX])
  | i `elem` [CMP16i16, TEST16i16] =
    ([OtherSideEffect AX], [OtherSideEffect EFLAGS])
  | i `elem` [DIV16r, IDIV16r] =
    ([OtherSideEffect AX, OtherSideEffect DX],
     [OtherSideEffect AX, OtherSideEffect DX, OtherSideEffect EFLAGS])
  | i `elem` [REP_STOSW_32] =
    ([OtherSideEffect AX, OtherSideEffect ECX, OtherSideEffect EDI],
     [OtherSideEffect ECX, OtherSideEffect EDI])
  | i `elem` [STOSW] =
    ([OtherSideEffect AX, OtherSideEffect EDI, OtherSideEffect EFLAGS],
     [OtherSideEffect EDI])
  | i `elem` [ADC16i16, SBB16i16] =
    ([OtherSideEffect AX, OtherSideEffect EFLAGS],
     [OtherSideEffect AX, OtherSideEffect EFLAGS])
  | i `elem` [REP_STOSW_64] =
    ([OtherSideEffect AX, OtherSideEffect RCX, OtherSideEffect RDI],
     [OtherSideEffect RCX, OtherSideEffect RDI])
  | i `elem`
      [RCL16mCL, RCL16rCL, RCL32mCL, RCL32rCL, RCL64mCL, RCL64rCL,
       RCL8mCL, RCL8rCL, RCR16mCL, RCR16rCL, RCR32mCL, RCR32rCL, RCR64mCL,
       RCR64rCL, RCR8mCL, RCR8rCL, ROL16mCL, ROL16rCL, ROL32mCL, ROL32rCL,
       ROL64mCL, ROL64rCL, ROL8mCL, ROL8rCL, ROR16mCL, ROR16rCL, ROR32mCL,
       ROR32rCL, ROR64mCL, ROR64rCL, ROR8mCL, ROR8rCL, SAR16mCL, SAR16rCL,
       SAR32mCL, SAR32rCL, SAR64mCL, SAR64rCL, SAR8mCL, SAR8rCL, SHL16mCL,
       SHL16rCL, SHL32mCL, SHL32rCL, SHL64mCL, SHL64rCL, SHL8mCL, SHL8rCL,
       SHLD16mrCL, SHLD16rrCL, SHLD32mrCL, SHLD32rrCL, SHLD64mrCL,
       SHLD64rrCL, SHR16mCL, SHR16rCL, SHR32mCL, SHR32rCL, SHR64mCL,
       SHR64rCL, SHR8mCL, SHR8rCL, SHRD16mrCL, SHRD16rrCL, SHRD32mrCL,
       SHRD32rrCL, SHRD64mrCL, SHRD64rrCL]
    = ([OtherSideEffect CL], [OtherSideEffect EFLAGS])
  | i `elem` [JCXZ] = ([OtherSideEffect CX], [])
  | i `elem` [MOV32o16a, MOV32o32a, MOV32o64a] =
    ([OtherSideEffect EAX], [Memory "mem"])
  | i `elem` [XCHG32ar, XCHG32ar64] =
    ([OtherSideEffect EAX], [OtherSideEffect EAX])
  | i `elem` [CDQ] =
    ([OtherSideEffect EAX], [OtherSideEffect EAX, OtherSideEffect EDX])
  | i `elem` [IMUL32r, MUL32r] =
    ([OtherSideEffect EAX],
     [OtherSideEffect EAX, OtherSideEffect EDX, OtherSideEffect EFLAGS])
  | i `elem` [ADD32i32, AND32i32, OR32i32, SUB32i32, XOR32i32] =
    ([OtherSideEffect EAX],
     [OtherSideEffect EAX, OtherSideEffect EFLAGS])
  | i `elem` [CMP32i32, TEST32i32] =
    ([OtherSideEffect EAX], [OtherSideEffect EFLAGS])
  | i `elem` [CDQE] = ([OtherSideEffect EAX], [OtherSideEffect RAX])
  | i `elem` [CMPXCHG8B] =
    ([OtherSideEffect EAX, OtherSideEffect EBX, OtherSideEffect ECX,
      OtherSideEffect EDX],
     [OtherSideEffect EAX, OtherSideEffect EDX, OtherSideEffect EFLAGS])
  | i `elem` [REP_STOSD_32] =
    ([OtherSideEffect EAX, OtherSideEffect ECX, OtherSideEffect EDI],
     [OtherSideEffect ECX, OtherSideEffect EDI])
  | i `elem` [STOSL] =
    ([OtherSideEffect EAX, OtherSideEffect EDI,
      OtherSideEffect EFLAGS],
     [OtherSideEffect EDI])
  | i `elem` [DIV32r, IDIV32r] =
    ([OtherSideEffect EAX, OtherSideEffect EDX],
     [OtherSideEffect EAX, OtherSideEffect EDX, OtherSideEffect EFLAGS])
  | i `elem` [ADC32i32, SBB32i32] =
    ([OtherSideEffect EAX, OtherSideEffect EFLAGS],
     [OtherSideEffect EAX, OtherSideEffect EFLAGS])
  | i `elem` [JECXZ] = ([OtherSideEffect ECX], [])
  | i `elem` [REP_MOVSB_32, REP_MOVSD_32, REP_MOVSW_32] =
    ([OtherSideEffect ECX, OtherSideEffect EDI, OtherSideEffect ESI],
     [OtherSideEffect ECX, OtherSideEffect EDI, OtherSideEffect ESI])
  | i `elem` [REPNE_PREFIX, REP_PREFIX] =
    ([OtherSideEffect ECX, OtherSideEffect EFLAGS],
     [OtherSideEffect ECX])
  | i `elem` [PUSHA16, PUSHA32] =
    ([OtherSideEffect EDI, OtherSideEffect ESI, OtherSideEffect EBP,
      OtherSideEffect EBX, OtherSideEffect EDX, OtherSideEffect ECX,
      OtherSideEffect EAX, OtherSideEffect ESP],
     [Memory "mem", OtherSideEffect ESP])
  | i `elem` [MOVSB, MOVSL, MOVSQ, MOVSW] =
    ([OtherSideEffect EDI, OtherSideEffect ESI,
      OtherSideEffect EFLAGS],
     [OtherSideEffect EDI, OtherSideEffect ESI])
  | i `elem`
      [CMOVA16rm, CMOVA16rr, CMOVA32rm, CMOVA32rr, CMOVA64rm, CMOVA64rr,
       CMOVAE16rm, CMOVAE16rr, CMOVAE32rm, CMOVAE32rr, CMOVAE64rm,
       CMOVAE64rr, CMOVB16rm, CMOVB16rr, CMOVB32rm, CMOVB32rr, CMOVB64rm,
       CMOVB64rr, CMOVBE16rm, CMOVBE16rr, CMOVBE32rm, CMOVBE32rr,
       CMOVBE64rm, CMOVBE64rr, CMOVE16rm, CMOVE16rr, CMOVE32rm, CMOVE32rr,
       CMOVE64rm, CMOVE64rr, CMOVG16rm, CMOVG16rr, CMOVG32rm, CMOVG32rr,
       CMOVG64rm, CMOVG64rr, CMOVGE16rm, CMOVGE16rr, CMOVGE32rm,
       CMOVGE32rr, CMOVGE64rm, CMOVGE64rr, CMOVL16rm, CMOVL16rr,
       CMOVL32rm, CMOVL32rr, CMOVL64rm, CMOVL64rr, CMOVLE16rm, CMOVLE16rr,
       CMOVLE32rm, CMOVLE32rr, CMOVLE64rm, CMOVLE64rr, CMOVNE16rm,
       CMOVNE16rr, CMOVNE32rm, CMOVNE32rr, CMOVNE64rm, CMOVNE64rr,
       CMOVNO16rm, CMOVNO16rr, CMOVNO32rm, CMOVNO32rr, CMOVNO64rm,
       CMOVNO64rr, CMOVNP16rm, CMOVNP16rr, CMOVNP32rm, CMOVNP32rr,
       CMOVNP64rm, CMOVNP64rr, CMOVNS16rm, CMOVNS16rr, CMOVNS32rm,
       CMOVNS32rr, CMOVNS64rm, CMOVNS64rr, CMOVO16rm, CMOVO16rr,
       CMOVO32rm, CMOVO32rr, CMOVO64rm, CMOVO64rr, CMOVP16rm, CMOVP16rr,
       CMOVP32rm, CMOVP32rr, CMOVP64rm, CMOVP64rr, CMOVS16rm, CMOVS16rr,
       CMOVS32rm, CMOVS32rr, CMOVS64rm, CMOVS64rr, JAE_1, JAE_2, JAE_4,
       JA_1, JA_2, JA_4, JBE_1, JBE_2, JBE_4, JB_1, JB_2, JB_4, JE_1,
       JE_2, JE_4, JGE_1, JGE_2, JGE_4, JG_1, JG_2, JG_4, JLE_1, JLE_2,
       JLE_4, JL_1, JL_2, JL_4, JNE_1, JNE_2, JNE_4, JNO_1, JNO_2, JNO_4,
       JNP_1, JNP_2, JNP_4, JNS_1, JNS_2, JNS_4, JO_1, JO_2, JO_4, JP_1,
       JP_2, JP_4, JS_1, JS_2, JS_4, SETAEm, SETAEr, SETAm, SETAr, SETBEm,
       SETBEr, SETBm, SETBr, SETEm, SETEr, SETGEm, SETGEr, SETGm, SETGr,
       SETLEm, SETLEr, SETLm, SETLr, SETNEm, SETNEr, SETNOm, SETNOr,
       SETNPm, SETNPr, SETNSm, SETNSr, SETOm, SETOr, SETPm, SETPr, SETSm,
       SETSr]
    = ([OtherSideEffect EFLAGS], [])
  | i `elem`
      [ADC16mi, ADC16mi8, ADC16mr, ADC16ri, ADC16ri8, ADC16rm, ADC16rr,
       ADC16rr_REV, ADC32mi, ADC32mi8, ADC32mr, ADC32ri, ADC32ri8,
       ADC32rm, ADC32rr, ADC32rr_REV, ADC64mi32, ADC64mi8, ADC64mr,
       ADC64ri32, ADC64ri8, ADC64rm, ADC64rr, ADC64rr_REV, ADC8mi, ADC8mr,
       ADC8ri, ADC8ri8, ADC8rm, ADC8rr, ADC8rr_REV, ADCX32rr, ADCX64rr,
       SBB16mi, SBB16mi8, SBB16mr, SBB16ri, SBB16ri8, SBB16rm, SBB16rr,
       SBB16rr_REV, SBB32mi, SBB32mi8, SBB32mr, SBB32ri, SBB32ri8,
       SBB32rm, SBB32rr, SBB32rr_REV, SBB64mi32, SBB64mi8, SBB64mr,
       SBB64ri32, SBB64ri8, SBB64rm, SBB64rr, SBB64rr_REV, SBB8mi, SBB8mr,
       SBB8ri, SBB8ri8, SBB8rm, SBB8rr, SBB8rr_REV, SETB_C16r, SETB_C32r,
       SETB_C64r, SETB_C8r]
    = ([OtherSideEffect EFLAGS], [OtherSideEffect EFLAGS])
  | i `elem` [LODSB] =
    ([OtherSideEffect ESI, OtherSideEffect EFLAGS],
     [OtherSideEffect AL, OtherSideEffect ESI])
  | i `elem` [LODSW] =
    ([OtherSideEffect ESI, OtherSideEffect EFLAGS],
     [OtherSideEffect AX, OtherSideEffect ESI])
  | i `elem` [LODSL] =
    ([OtherSideEffect ESI, OtherSideEffect EFLAGS],
     [OtherSideEffect EAX, OtherSideEffect ESI])
  | i `elem` [LODSQ] =
    ([OtherSideEffect ESI, OtherSideEffect EFLAGS],
     [OtherSideEffect RAX, OtherSideEffect ESI])
  | i `elem`
      [CALL16m, CALL16r, CALL32m, CALL32r, CALLpcrel16, CALLpcrel32,
       TAILJMPd, TAILJMPr, TCRETURNdi, TCRETURNri]
    = ([OtherSideEffect ESP], [])
  | i `elem`
      [PUSH16i8, PUSH16r, PUSH16rmr, PUSH32i8, PUSH32r, PUSH32rmr,
       PUSHi16, PUSHi32]
    = ([OtherSideEffect ESP], [Memory "mem", OtherSideEffect ESP])
  | i `elem` [PUSHF16, PUSHF32] =
    ([OtherSideEffect ESP, OtherSideEffect EFLAGS],
     [Memory "mem", OtherSideEffect ESP])
  | i `elem` [MOV64o32a, MOV64o64a] =
    ([OtherSideEffect RAX], [Memory "mem"])
  | i `elem` [CMP64i32, TEST64i32] =
    ([OtherSideEffect RAX], [OtherSideEffect EFLAGS])
  | i `elem` [XCHG64ar] =
    ([OtherSideEffect RAX], [OtherSideEffect RAX])
  | i `elem` [ADD64i32, AND64i32, OR64i32, SUB64i32, XOR64i32] =
    ([OtherSideEffect RAX],
     [OtherSideEffect RAX, OtherSideEffect EFLAGS])
  | i `elem` [CQO] =
    ([OtherSideEffect RAX], [OtherSideEffect RAX, OtherSideEffect RDX])
  | i `elem` [IMUL64r, MUL64r] =
    ([OtherSideEffect RAX],
     [OtherSideEffect RAX, OtherSideEffect RDX, OtherSideEffect EFLAGS])
  | i `elem` [ADC64i32, SBB64i32] =
    ([OtherSideEffect RAX, OtherSideEffect EFLAGS],
     [OtherSideEffect RAX, OtherSideEffect EFLAGS])
  | i `elem` [CMPXCHG16B] =
    ([OtherSideEffect RAX, OtherSideEffect RBX, OtherSideEffect RCX,
      OtherSideEffect RDX],
     [OtherSideEffect RAX, OtherSideEffect RDX, OtherSideEffect EFLAGS])
  | i `elem` [REP_STOSD_64, REP_STOSQ_64] =
    ([OtherSideEffect RAX, OtherSideEffect RCX, OtherSideEffect RDI],
     [OtherSideEffect RCX, OtherSideEffect RDI])
  | i `elem` [STOSQ] =
    ([OtherSideEffect RAX, OtherSideEffect RDI,
      OtherSideEffect EFLAGS],
     [OtherSideEffect RDI])
  | i `elem` [DIV64r, IDIV64r] =
    ([OtherSideEffect RAX, OtherSideEffect RDX],
     [OtherSideEffect RAX, OtherSideEffect RDX, OtherSideEffect EFLAGS])
  | i `elem` [JRCXZ] = ([OtherSideEffect RCX], [])
  | i `elem` [REP_MOVSB_64, REP_MOVSD_64, REP_MOVSQ_64, REP_MOVSW_64]
    =
    ([OtherSideEffect RCX, OtherSideEffect RDI, OtherSideEffect RSI],
     [OtherSideEffect RCX, OtherSideEffect RDI, OtherSideEffect RSI])
  | i `elem`
      [CALL64m, CALL64pcrel32, CALL64r, LOAD16, LOAD32, LOAD64, LOAD8,
       STORE16, STORE32, STORE64, STORE8, TAILJMPd64, TAILJMPd64_REX,
       TAILJMPr64, TAILJMPr64_REX, TCRETURNdi64, TCRETURNri64]
    = ([OtherSideEffect RSP], [])
  | i `elem` [PUSH64i32, PUSH64i8, PUSH64r, PUSH64rmr] =
    ([OtherSideEffect RSP], [Memory "mem", OtherSideEffect RSP])
  | i `elem` [POP_cst, PUSH_cst] =
    ([OtherSideEffect RSP], [OtherSideEffect RSP])
  | i `elem` [PUSHF64] =
    ([OtherSideEffect RSP, OtherSideEffect EFLAGS],
     [Memory "mem", OtherSideEffect RSP])

